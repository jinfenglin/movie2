var search_data = {"index":{"searchIndex":["database","moviedata","movietest","add_entry()","add_entry()","attr_differ()","build_database()","entry_to_array()","find_and_replace()","get_amount()","get_attribute()","get_database()","get_entry()","get_movie_by_user()","get_rate()","get_user_by_movie()","load_data()","mean()","movies()","new()","new()","new()","predict()","print_database()","print_db_status()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","viewers()","created.rid"],"longSearchIndex":["database","moviedata","movietest","database#add_entry()","movietest#add_entry()","movietest#attr_differ()","database#build_database()","movietest#entry_to_array()","moviedata#find_and_replace()","database#get_amount()","movietest#get_attribute()","database#get_database()","movietest#get_entry()","database#get_movie_by_user()","database#get_rate()","database#get_user_by_movie()","database#load_data()","movietest#mean()","moviedata#movies()","database::new()","moviedata::new()","movietest::new()","moviedata#predict()","database#print_database()","database#print_db_status()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()",""],"info":[["DataBase","","DataBase.html","","<p>This class provide a database for regulating the test and train data.\n\n<pre>Four database are contained in this ...</pre>\n"],["MovieData","","MovieData.html","","<p>Calculate the similarity between users and make predication for one user on\na certain movie\n"],["MovieTest","","MovieTest.html","",""],["add_entry","DataBase","DataBase.html#method-i-add_entry","(database,first_key,second_key,value)","<p>Add one entry into database\n"],["add_entry","MovieTest","MovieTest.html#method-i-add_entry","(user,movie,real,pred)","<p>Add one entry into our result hash\n"],["attr_differ","MovieTest","MovieTest.html#method-i-attr_differ","(entry,attr1,attr2)","<p>Get the absolute difference of 2 attributes, the two should be able to\napplied to &#39;-&#39; operatio …\n"],["build_database","DataBase","DataBase.html#method-i-build_database","(file, database_user_key,database_movie_key)","<p>Add all entries into sub databases\n"],["entry_to_array","MovieTest","MovieTest.html#method-i-entry_to_array","(entry)","<p>Transfer a single entry into a list, in the required format\n"],["find_and_replace","MovieData","MovieData.html#method-i-find_and_replace","(list,user,score,k)","<p>If the list length is lower than K, insert the user  Replace the lowest\nscore item in list if its similarity …\n"],["get_amount","DataBase","DataBase.html#method-i-get_amount","(database)","<p>Return the size of database\n"],["get_attribute","MovieTest","MovieTest.html#method-i-get_attribute","(entry,attr=nil)","<p>Get a required attribute from the entry\n"],["get_database","DataBase","DataBase.html#method-i-get_database","(key_type=:user_key,database_type=:test)","<p>return one of the four database according parameter. In default, return the\ndatabase store test date …\n"],["get_entry","MovieTest","MovieTest.html#method-i-get_entry","(user,movie)","<p>Get an entry according to the user and movie\n"],["get_movie_by_user","DataBase","DataBase.html#method-i-get_movie_by_user","(user, database_type)","<p>Get all the movies watched by user\n"],["get_rate","DataBase","DataBase.html#method-i-get_rate","(user,movie,database_type)","<p>Retrive the rate from database\n"],["get_user_by_movie","DataBase","DataBase.html#method-i-get_user_by_movie","(movie,database_type)","<p>Get all the viewers of the movie\n"],["load_data","DataBase","DataBase.html#method-i-load_data","(dir_path,file_name=nil)","<p>Load data into database, the base path is hard coded. dir_path design the\ndir path, file_name indicate …\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>Calculate mean\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>Return all movies viewed by the user\n"],["new","DataBase","DataBase.html#method-c-new","(dir_path,file_name=nil)","<p>Initialize and load data into the four sub databases\n"],["new","MovieData","MovieData.html#method-c-new","(dir,filename=nil)","<p>Create a database and load training and testing data into it\n"],["new","MovieTest","MovieTest.html#method-c-new","(database)",""],["predict","MovieData","MovieData.html#method-i-predict","(u,m,k=25)","<p>Get the average score of the k user who has watched this movie  and has\nhighest similarity with this …\n"],["print_database","DataBase","DataBase.html#method-i-print_database","(database)","<p>Show every entry in the database\n"],["print_db_status","DataBase","DataBase.html#method-i-print_db_status","()","<p>Show the sizes of all the database\n"],["rating","MovieData","MovieData.html#method-i-rating","(u,m)","<p>return the rate user u give to movie m\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>Calculate rms\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k=nil)","<p>Run the test! Return MovieTest\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(u1,u2)","<p>Calculate the similarity between 2 users\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>Calculate stddev\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>Transfer the result hash into list.\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>Return all the viewers of the movie\n"],["created.rid","","doc/created_rid.html","",""]]}}